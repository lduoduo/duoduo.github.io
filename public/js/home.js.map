{"version":3,"names":[],"mappings":"","sources":["home.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n *  音乐可视化插件 -- by duoduo\n *  兼容：\n *      1. audio元素的播放模式\n *      2. arraybuffer解码的播放模式\n *  用法：\n *      window.mv = new MusicVisualizer();\n        mv.ini($(\"#canvas\")[0], window);\n        mv.play(\"/media/xxx.mp3\", isMobile); isMobile是否为手机，PC直接用audio标签处理，手机会用arraybuffer处理\n        更换歌曲：mv.play(\"/media/xxx.mp3\", isMobile);\n        暂停：mv.pause();\n        恢复：mv.resume();\n        停止：mv.stop();\n        更换音量：mv.changeVolumn(num);\n *  待完善：\n *      arraybuffer的本地缓存!\n */\nvar MusicVisualizer = function () {\n\n    this.source = {};//当前正在播放的bufferSource\n\n    this.box = null;\n    this.cxt = null;\n\n    this.volumnId = null;\n\n    this.analyser = MusicVisualizer.ac.createAnalyser();;\n    this.gainNode = MusicVisualizer.ac[MusicVisualizer.ac.createGain ? \"createGain\" : \"createGainNode\"]();\n\n    this.size = 64;\n    this.analyser.fftSize = this.size * 8;\n\n    this.analyser.connect(MusicVisualizer.ac.destination);\n\n    this.gainNode.connect(this.analyser);\n\n    this.xhr = new XMLHttpRequest();\n}\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;\n\nMusicVisualizer.ac = new (window.AudioContext)();\n\n//检测是否为function\nMusicVisualizer.isFunction = function (fun) {\n    return Object.prototype.toString.call(fun) == \"[object Function]\";\n}\n\n// //将canvas用作背景,目前在新的chrome里已经不支持了\n// MusicVisualizer.prototype.ini = function (container, canvasId, volumnId) {\n//     var self = this;\n//     this.box = container;\n//     this.cxt = document.getCSSCanvasContext(\"2d\", canvasId, this.box.clientWidth, this.box.clientHeight);\n//     this.volumnId = volumnId;\n//     this.visualizer();\n//     this.volumnId.onclick = function () {\n//         self.changeVolumn(this.value / this.max);\n//     }\n// }\n\n//初始化，传入canvas, 挂载对象，初始化音量\nMusicVisualizer.prototype.ini = function (container, context, volumnId) {\n    var box = this.box = container;\n    var ct = this.window = context;\n    box.width = ct.screen.availWidth,\n    box.height = ct.screen.availHeight,\n    this.cxt = box.getContext(\"2d\"),\n    this.volumnId = volumnId,\n    this.visualizer();\n}\n\n//异步加载音乐url，接收arraybuffer数据流\nMusicVisualizer.prototype.load = function (xhr, url, cb) {\n    var self = this;\n    xhr.abort();\n\n    xhr.open('GET', url);\n    xhr.responseType = \"arraybuffer\";\n    xhr.onload = function () {\n        console.log(xhr.response);\n        MusicVisualizer.isFunction(cb) && cb.call(self, url, xhr.response);\n    }\n    xhr.send(); // 发送请求\n}\n\n//二进制数据进行audio解码\nMusicVisualizer.prototype.decode = function (url, arraybuffer, cb) {\n    var self = this;\n    MusicVisualizer.ac.decodeAudioData(arraybuffer, function (buffer) {\n        if (self.source.curr) {\n            var fn = self.source.bs[self.source.bs.stop ? \"stop\" : \"nodeOff\"];\n            self.source.bs && fn && self.source.bs[self.source.bs.stop ? \"stop\" : \"nodeOff\"]();\n        }\n        self.source.curr = url;\n        var bs = MusicVisualizer.ac.createBufferSource();\n        bs.buffer = buffer;\n        bs.loop = true;\n        //bufferSource.connect(ac.destination);\n        bs.connect(self.gainNode);\n        //bufferSource.start();\n        bs[bs.start ? \"start\" : \"noteOn\"](0);\n        self.source.bs = bs;\n\n    }, function (err) {\n        console.log('err:' + err);\n    });\n}\n\n//播放url的歌曲，调用该方法可以实时换歌\nMusicVisualizer.prototype.play = function (url, isMobile/*是否移动设备*/) {\n    var self = this;\n    if (self.source.curr && self.source.curr == url) {\n        return;\n    }\n    //pc上通过audio标签创建MediaaudioElementSourceNode，比ajax请求再解码要快\n    if (!isMobile) {\n        //self.audio.src = path;\n\n        //兼容arraybuffer的方式，如果有，先停掉\n        this.stop();\n\n        if(!self.audio){\n            self.audio = new Audio(url);\n            self.audio.loop = true;\n            var bs = MusicVisualizer.ac.createMediaElementSource(self.audio);\n            bs.connect(self.gainNode);\n            self.source.bs = bs;\n        }else{\n            // this.stop();\n            self.audio.src = url;\n        }\n\n\n        self.audio.play();\n\n        self.source.curr = url;\n\n    } else {\n        if(self.audio){\n            self.audio.pause();\n            self.audio = null;\n        }\n        self.load(self.xhr, url, self.decode);\n    }\n\n}\n\n//音量控制\nMusicVisualizer.prototype.changeVolumn = function (percent) {\n    this.gainNode.gain.value = percent * percent;\n}\n\n//可视化控制\nMusicVisualizer.prototype.visualizer = function () {\n    var self = this;\n    this.cxt.clearRect(0, 0, this.cxt.canvas.width, this.cxt.canvas.height);\n    var arr = new Uint8Array(this.analyser.frequencyBinCount);\n    function v() {\n        self.analyser.getByteFrequencyData(arr);\n        //console.log(arr);\n        self.drawCanvasDot(arr); //画圆圈\n        // self.drawCanvasRect(arr); //画柱状条\n        window.requestAnimFrame(v); //使动画更流畅\n    }\n    window.requestAnimFrame(v);\n}\n\n//画圆圈\nMusicVisualizer.prototype.drawCanvasDot = function (arr) {\n    var ca = this.cxt.canvas;\n    this.cxt.clearRect(0, 0, ca.width, ca.height);\n    if (!this.source.dot) {\n        this.source.dot = [];\n        var tp = this.source.dot;\n        for (var i = 0; i < this.size; i++) {\n            tp[i] = {};\n            tp[i].x = getRandom(0, ca.width);\n            tp[i].y = getRandom(0, ca.height);\n            tp[i].color = \"rgba(\" + getRandom(0, 255) + \",\" + getRandom(0, 255) + \",\" + getRandom(0, 255) + \",0)\";\n            tp[i].dr = ca.height / 50;\n            tp[i].vx = getRandom(0.5, 1.5, true);\n        }\n    }\n    var tp = this.source.dot;\n    for (var i = 0; i < this.size; i++) {\n        tp[i].r = tp[i].dr + arr[4 * i] / 256 * (ca.height > ca.width ? ca.width : ca.height) / 10;\n        tp[i].x = (tp[i].x > ca.width + tp[i].r ? -tp[i].r : tp[i].x + tp[i].vx);\n        this.cxt.beginPath();\n        this.cxt.arc(tp[i].x, tp[i].y, tp[i].r, 0, 2 * Math.PI);\n        var rrd = this.cxt.createRadialGradient(tp[i].x, tp[i].y, 0, tp[i].x, tp[i].y, tp[i].r);\n        rrd.addColorStop(0, \"#fff\");\n        rrd.addColorStop(1, tp[i].color);\n        this.cxt.fillStyle = rrd;\n        this.cxt.fill();\n    }\n}\n\n//画柱状条\nMusicVisualizer.prototype.drawCanvasRect = function (arr) {\n    var ca = this.cxt.canvas;\n    this.cxt.clearRect(0, 0, ca.width, ca.height);\n    var h, w = ca.width / this.size;\n    if (!this.source.rect) {\n        this.source.rect = [];\n        var tp = this.source.rect;\n        for (var i = 0; i < this.size; i++) {\n            tp[i] = {};\n            tp[i].vy = 2;\n            tp[i].cap = w * 0.8 > 10 ? 10 : w * 0.8;\n            tp[i].h = 0;\n            tp[i].dy = 5 * tp[i].cap;\n        }\n    }\n    var grd = this.cxt.createLinearGradient(0, 0, 0, ca.height);\n    grd.addColorStop(1, \"green\");\n    grd.addColorStop(0.3, \"yellow\");\n    grd.addColorStop(0, \"red\");\n    this.cxt.fillStyle = grd;\n\n    for (var i = 0; i < this.size; i++) {\n        h = arr[4 * i] / 256 * ca.height;\n        if (this.source.rect[i].h <= 0) {\n            this.source.rect[i].h = (h == 0 ? 0 : h + this.source.rect[i].dy);\n        } else {\n            // source.rect[i].h = (source.rect[i].h < 0? 0: source.rect[i].h);\n            this.source.rect[i].h = (this.source.rect[i].h < h ? h + this.source.rect[i].dy : this.source.rect[i].h - this.source.rect[i].vy);\n            this.source.rect[i].h = (this.source.rect[i].h + this.source.rect[i].cap >= ca.height ? ca.height - this.source.rect[i].cap : this.source.rect[i].h);\n        }\n\n        this.cxt.beginPath();\n        this.cxt.fillRect(w * i, ca.height - this.source.rect[i].h - this.source.rect[i].cap, w * 0.8, this.source.rect[i].cap); // cap\n        this.cxt.fillRect(w * i, ca.height - h, w * 0.8, h);\n    }\n}\n\n//窗口大小变化监控\nMusicVisualizer.prototype.resize = function () {\n    var ca = this.cxt.canvas;\n    var bk_w = ca.width;\n    var bk_h = ca.height;\n    this.width = this.box.clientWidth;\n    ca.height = this.box.clientHeight;\n    if (this.source.dot) {\n        var tp = this.source.dot;\n        for (var i = 0; i < this.size; i++) {\n            tp[i].x = tp[i].x * ca.width / bk_w;\n            tp[i].y = tp[i].y * ca.height / bk_h;\n        }\n    }\n}\n\n//播放mv对象的source,mv.onended为播放结束后的回调, 目前没有用到，无法证实是否可用\nMusicVisualizer.play1 = function (mv) {\n\n    mv.source.connect(mv.analyser);\n\n    if (mv.source === mv.audioSource) {\n        mv.audio.play();\n        mv.audio.onended = mv.onended;\n    } else {\n        //兼容较老的API\n        mv.source[mv.source.start ? \"start\" : \"noteOn\"](0);\n\n        //为该bufferSource绑定onended事件\n        MusicVisualizer.isFunction(mv.onended) && (mv.source.onended = mv.onended);\n    }\n\n}\n\n//暂停\nMusicVisualizer.prototype.pause = function () {\n    if(this.audio){\n        this.audio.pause();\n    }else{\n        this.source.bs.disconnect();\n    }\n}\n\n//恢复\nMusicVisualizer.prototype.resume = function () {\n    if(this.audio){\n        this.audio.play();\n    }else{\n        this.source.bs.connect(this.gainNode);\n    }\n}\n\n//停止\nMusicVisualizer.prototype.stop = function () {\n    if(this.audio){\n        this.audio.pause();\n        this.audio.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAVFYAAFRWAAABAAgAZGF0YQAAAAA=';\n    }else{\n        this.source.bs && this.source.bs.stop && this.source.bs.stop();\n    }\n}\n\n//停止mv.source， 该方法有问题，目前没有用到\nMusicVisualizer.stop1 = function (mv) {\n    if (mv.source === mv.audioSource) {\n        mv.audio.pause();\n        mv.audio.onended = window.undefined;\n    } else {\n        //兼容较老的API\n        mv.source[mv.source.stop ? \"stop\" : \"noteOff\"](0);\n\n        //停止后移除之前为mv.source绑定的onended事件\n        mv.source.onended = window.undefined;\n    }\n}\n\n\n//生成随机数\nfunction getRandom(m, n, isFloat) {\n    return (isFloat ? Math.random() * (n - m) + m : Math.floor(Math.random() * (n - m)) + m);\n}\n\nwindow.requestAnimFrame = (function () {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n        function ( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n            return window.setTimeout(callback, 1000 / 60);\n        };\n})();\n\nif (typeof module !== \"undefined\") module.exports = MusicVisualizer;\n},{}],2:[function(require,module,exports){\n(function () {\n    var MusicVisualizer = require('../../module/music/play.js');\n\n    var home = {\n        init: function () {\n            this.initMusic();\n            worker.init();\n        },\n        initMusic: function () {\n            window.mv = new MusicVisualizer();\n            mv.play(\"public/media/bg.m4a\", false);\n\n            $('body').on('click', '.J-Music', function () {\n                var $el = $(this);\n                $el.toggleClass('on');\n                if ($el.hasClass('on')) { // 播放\n                    mv.resume();\n                    // $('#music')[0].play();\n                } else { // 暂停\n                    mv.pause();\n                    // $('#music')[0].pause();\n                }\n            });\n        }\n    }\n\n    var worker = {\n        init:function(){\n            this.initWS();\n            this.initWW();\n        },\n        initWS: function () {\n            if ('serviceWorker' in navigator) {\n                navigator.serviceWorker.register('/public/js/sw.js', { scope: './', insecure: true })\n                    .then(function (registration) {\n                        // Registration was successful\n                        console.log('ServiceWorker registration successful with scope: ', registration.scope);\n                    }).catch(function (err) {\n                        // registration failed :(\n                        console.log('ServiceWorker registration failed: ', err);\n                    });\n            }\n        },\n        initWW: function () {\n            var _ = this;\n            _.ww = new Worker('/public/js/ww.js');\n            _.ww.addEventListener('message', function (e) {\n                console.log('get message from web workers');\n                console.log(e.data);\n                //子线程调用完毕关闭\n                _.ww.terminate();\n            });\n\n            // _.ww.onerror(function (e) {\n            //     console.log('err : \\n');\n            //     console.log(e);\n            //     //子线程调用完毕关闭\n            //     _.ww.terminate();\n            // });\n\n            //或者这种写法\n            _.ww.addEventListener('error', function (event) {\n                console.log(event);\n                //子线程调用完毕关闭\n                _.ww.terminate();\n            });\n\n            setTimeout(function () {\n                console.log('post message to web workers');\n                _.ww.postMessage({ method: 'echo', args: ['Work'] });\n            }, 5000);\n        }\n    }\n\n    home.init();\n\n})();\n},{\"../../module/music/play.js\":1}]},{},[2]);\n"],"file":"home.js"}